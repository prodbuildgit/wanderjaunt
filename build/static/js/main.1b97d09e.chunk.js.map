{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","employees","setEmployees","useEffect","getEmployees","then","res","data","catch","err","console","log","a","axios","get","response","length","heads","filter","employee","manager_id","sort","b","name","split","getChild","head","id","map","child","title","showEmployees","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRA+EeA,EA1EH,WACV,IACA,EAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KAEAC,qBAAU,WACRC,IACGC,MAAK,SAAAC,GACJJ,EAAaI,EAAIC,SAElBC,OAAM,SAAAC,GACLC,QAAQC,IAAIF,QAEf,IAEH,IAAML,EAAY,uCAAG,sBAAAQ,EAAA,+EACZC,IAAMC,IAdA,8IAeVT,MAAK,SAAAU,GACJ,OAAOA,KAERP,OAAM,SAAAC,GACLC,QAAQC,IAAIF,OANG,2CAAH,qDAgDlB,OACE,8BACGR,EAAUe,OAxCO,SAACf,GACrB,IAAMgB,EAAQhB,EAAUiB,QAAO,SAAAC,GAC7B,OAA+B,OAAxBA,EAASC,cACfC,MAAK,SAACT,EAAGU,GACV,OAAIV,EAAEW,OAASD,EAAEC,KAAe,EACzBX,EAAEW,KAAKC,MAAM,KAAK,GAAKF,EAAEC,KAAKC,MAAM,KAAK,IAAM,EAAI,KAGtDC,EAAW,SAAXA,EAAYxB,EAAWyB,GAC3B,OAAOzB,EAAUiB,QAAO,SAAAC,GACtB,OAAOA,EAASC,aAAeM,EAAKC,MACnCN,MAAK,SAACT,EAAGU,GACV,OAAIV,EAAEW,OAASD,EAAEC,KAAe,EACzBX,EAAEW,KAAKC,MAAM,KAAK,GAAKF,EAAEC,KAAKC,MAAM,KAAK,IAAM,EAAI,KACzDI,KAAI,SAAAC,GAAK,OACV,6BACE,yCACMA,EAAMC,MADZ,aACsBD,EAAMN,MACzBE,EAASxB,EAAW4B,OAHhBA,EAAMF,QASnB,OACE,6BACGV,EAAMD,QACLC,EAAMW,KAAI,SAAAF,GAAI,OACZ,yCACMA,EAAKI,MADX,aACqBJ,EAAKH,MACvBE,EAASxB,EAAWyB,KAFdA,EAAKC,SAalBI,CAAc9B,GAEd,8CC5DY+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtC,MAAK,SAAAuC,GACjCA,EAAaC,kB","file":"static/js/main.1b97d09e.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\n\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n  const SERVER = 'https://gist.githubusercontent.com/chancock09/6d2a5a4436dcd488b8287f3e3e4fc73d/raw/fa47d64c6d5fc860fabd3033a1a4e3c59336324e/employees.json'\r\n  const [employees, setEmployees] = useState([])\r\n\r\n  useEffect(() => {\r\n    getEmployees()\r\n      .then(res => {\r\n        setEmployees(res.data)\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }, [])\r\n\r\n  const getEmployees = async () => {\r\n    return axios.get(SERVER)\r\n      .then(response => {\r\n        return response\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n      })\r\n  }\r\n\r\n  const showEmployees = (employees) => {\r\n    const heads = employees.filter(employee => {\r\n      return employee.manager_id === null\r\n    }).sort((a, b) => {\r\n      if (a.name === b.name) { return 0 }\r\n      return a.name.split(\" \")[1] < b.name.split(\" \")[1] ? -1 : 1\r\n    })\r\n\r\n    const getChild = (employees, head) => {\r\n      return employees.filter(employee => {\r\n        return employee.manager_id === head.id\r\n      }).sort((a, b) => {\r\n        if (a.name === b.name) { return 0 }\r\n        return a.name.split(\" \")[1] < b.name.split(\" \")[1] ? -1 : 1\r\n      }).map(child => (\r\n        <ul key={child.id}>\r\n          <li>\r\n            {`${child.title}: ${child.name}`}\r\n            {getChild(employees, child)}\r\n          </li>\r\n        </ul>\r\n      ))\r\n    }\r\n\r\n    return (\r\n      <ul>\r\n        {heads.length && (\r\n          heads.map(head => (\r\n            <li key={head.id}>\r\n              {`${head.title}: ${head.name}`}\r\n              {getChild(employees, head)}\r\n            </li>\r\n          ))\r\n        )}\r\n      </ul>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      {employees.length ? (\r\n        showEmployees(employees)\r\n      ) : (\r\n        <div>No data!</div>\r\n      )\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}